{#
/**
 * Starfield plugin for Craft CMS
 *
 * Input template
 *
 * @link https://github.com/redboer
 * @copyright Copyright (c) Richard de Boer
 * @license MIT
 */
#}

{# @var name string #}
{# @var value int|null #}
{# @var maxStars int #}
{# @var allowZeroStars bool #}

{% set currentValue = value ?? 0 %}
{% set allowZero = allowZeroStars ?? false %}

<div class="starfield-input" data-max-stars="{{ maxStars }}" data-allow-zero="{{ allowZero ? '1' : '0' }}">
    <input type="hidden" 
           name="{{ name }}" 
           value="{{ currentValue }}"
           id="{{ name }}-input">

    <div class="starfield-stars" role="radiogroup" aria-label="{{ 'Star rating'|t('starfield') }}">
        {% for i in 1..maxStars %}
            <button type="button"
                    class="starfield-star{% if i <= currentValue %} active{% endif %}"
                    data-value="{{ i }}"
                    role="radio"
                    aria-checked="{{ i == currentValue ? 'true' : 'false' }}"
                    aria-label="{{ '{count} {count, plural, =1{star} other{stars}}'|t('starfield', { count: i }) }}"
                    title="{{ '{count} {count, plural, =1{star} other{stars}}'|t('starfield', { count: i }) }}">
                <span class="starfield-star-icon">‚≠ê</span>
            </button>
        {% endfor %}

        {% if allowZero and currentValue > 0 %}
            <button type="button" 
                    class="starfield-clear"
                    aria-label="{{ 'Clear rating'|t('starfield') }}"
                    title="{{ 'Clear rating'|t('starfield') }}">
                {{ 'Clear'|t('starfield') }}
            </button>
        {% endif %}
    </div>
</div>

{% css %}
.starfield-input {
    display: flex;
    align-items: center;
    gap: 8px;
}

.starfield-stars {
    display: flex;
    align-items: center;
    gap: 4px;
}

.starfield-star {
    background: none;
    border: none;
    padding: 4px;
    cursor: pointer;
    font-size: 20px;
    transition: transform 0.1s ease, opacity 0.2s ease;
    opacity: 0.3;
}

.starfield-star:hover,
.starfield-star:focus {
    transform: scale(1.2);
    opacity: 0.7;
}

.starfield-star.active {
    opacity: 1;
}

.starfield-star:focus {
    outline: 2px solid var(--focus-color, #0d78f2);
    outline-offset: 2px;
    border-radius: 2px;
}

.starfield-clear {
    margin-left: 8px;
    padding: 4px 8px;
    font-size: 12px;
    cursor: pointer;
    background: transparent;
    border: 1px solid currentColor;
    border-radius: 3px;
    opacity: 0.6;
    transition: opacity 0.2s ease;
}

.starfield-clear:hover {
    opacity: 1;
}
{% endcss %}

{% js %}
(function() {
    const container = document.querySelector('.starfield-input[data-max-stars="{{ maxStars }}"]');
    if (!container) return;
    
    const input = container.querySelector('input[type="hidden"]');
    const stars = container.querySelectorAll('.starfield-star');
    const clearBtn = container.querySelector('.starfield-clear');
    const allowZero = container.dataset.allowZero === '1';

    function updateStars(value) {
        stars.forEach((star, index) => {
            const starValue = index + 1;
            if (starValue <= value) {
                star.classList.add('active');
                star.setAttribute('aria-checked', starValue == value ? 'true' : 'false');
            } else {
                star.classList.remove('active');
                star.setAttribute('aria-checked', 'false');
            }
        });

        input.value = value;

        if (clearBtn) {
            clearBtn.style.display = value > 0 ? 'inline-block' : 'none';
        }
    }

    stars.forEach((star) => {
        star.addEventListener('click', function() {
            const value = parseInt(this.dataset.value);
            updateStars(value);
        });

        star.addEventListener('keydown', function(e) {
            const currentValue = parseInt(input.value) || 0;
            let newValue = currentValue;
            const minValue = allowZero ? 0 : 1;

            switch(e.key) {
                case 'ArrowRight':
                case 'ArrowUp':
                    newValue = Math.min(currentValue + 1, {{ maxStars }});
                    e.preventDefault();
                    break;
                case 'ArrowLeft':
                case 'ArrowDown':
                    newValue = Math.max(currentValue - 1, minValue);
                    e.preventDefault();
                    break;
                case 'Home':
                    newValue = minValue;
                    e.preventDefault();
                    break;
                case 'End':
                    newValue = {{ maxStars }};
                    e.preventDefault();
                    break;
            }
            
            if (newValue !== currentValue) {
                updateStars(newValue);
                if (newValue > 0) {
                    stars[newValue - 1].focus();
                }
            }
        });
    });
    
    if (clearBtn) {
        clearBtn.addEventListener('click', function() {
            updateStars(0);
        });
    }
})();
{% endjs %}